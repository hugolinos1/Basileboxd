rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is an admin
    function isAdmin() {
      return request.auth != null && request.auth.uid == '4aqCNYkLwgXpp5kjMnGA6V0bdL52';
    }

    // Fonctions de validation
    function isValidPartyName(name) {
      return name is string && name.size() > 0;
    }
    
    function isValidPartyDate(date) {
      return date is timestamp;
    }
    
    // Fonction utilitaire : est-ce un participant à l'événement ?
    function isParticipant(partyData) {
      return request.auth != null && 
             partyData.participants is list && 
             request.auth.uid in partyData.participants;
    }

    // PARTIES (événements)
    match /parties/{partyId} {
      allow read: if true; // Tout le monde peut lire les événements
      
      // Création d'événement
      allow create: if request.auth != null &&
        isValidPartyName(request.resource.data.name) &&
        isValidPartyDate(request.resource.data.date) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.creatorEmail == request.auth.token.email &&
        request.resource.data.participants is list &&
        request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
                      (
                        // Cas 1 : créateur ou admin met à jour les champs principaux, mediaItems (y compris suppression/modification par créateur/admin), participants
                        ( (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                          // Champs autorisés pour la mise à jour principale par le créateur/admin
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasAny(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems']) &&
                          // S'assurer que seuls les champs autorisés pour cette branche sont modifiés si ce n'est pas seulement mediaItems
                          (
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) || // Si SEULEMENT mediaItems est modifié par créateur/admin (pour suppression/modif)
                            request.resource.data.diff(resource.data).affectedKeys() // Sinon, vérification des autres champs
                              .hasOnly(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems'])
                          ) &&
                          // Validations conditionnelles
                          (!('name' in request.resource.data.diff(resource.data).affectedKeys()) || isValidPartyName(request.resource.data.name)) &&
                          (!('date' in request.resource.data.diff(resource.data).affectedKeys()) || isValidPartyDate(request.resource.data.date)) &&
                          // Si non-admin, les champs sensibles ne changent pas
                          (isAdmin() || (
                            request.resource.data.createdBy == resource.data.createdBy &&
                            request.resource.data.creatorEmail == resource.data.creatorEmail
                          ))
                        ) ||

                        // Cas 2 : tout utilisateur authentifié peut noter
                        (
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                          request.resource.data.ratings[request.auth.uid] is number &&
                          request.resource.data.ratings[request.auth.uid] >= 0 && request.resource.data.ratings[request.auth.uid] <= 10 &&
                          (resource.data.ratings == null || resource.data.ratings.keys().removeAll(request.resource.data.ratings.keys()).size() == 0) &&
                          request.resource.data.ratings.keys().removeAll(resource.data.ratings == null ? [] : resource.data.ratings.keys()).hasOnly([request.auth.uid])
                        ) ||

                        // Cas 3 : AJOUT de mediaItems par tout utilisateur authentifié (simplifié)
                        (
                          request.auth != null &&
                          // S'assurer que SEUL mediaItems est affecté dans CETTE partie de la condition OR
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
                          // S'assurer qu'il s'agit d'un ajout (la nouvelle taille est plus grande)
                          request.resource.data.mediaItems.size() > (resource.data.mediaItems == null ? 0 : resource.data.mediaItems.size())
                          // Le client DOIT s'assurer que uploaderId est correctement défini dans l'objet MediaItem.
                          // La validation de chaque item d'un arrayUnion est complexe en règles de sécurité.
                        )
                      );

      allow delete: if isAdmin();

      // Sous-collection comments
      match /comments/{commentId} {
        allow read: if true; // Ou request.auth != null;

        allow create: if request.auth != null &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 &&
                         request.resource.data.partyId == partyId &&
                         request.resource.data.timestamp is timestamp; // serverTimestamp sera évalué correctement

        allow update: if request.auth != null &&
                         (
                           (request.auth.uid == resource.data.userId &&
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']) &&
                            request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                            request.resource.data.userId == resource.data.userId &&
                            request.resource.data.partyId == resource.data.partyId &&
                            request.resource.data.timestamp == resource.data.timestamp
                           ) ||
                           isAdmin()
                         );

        allow delete: if request.auth != null &&
                         (request.auth.uid == resource.data.userId || isAdmin());
      }
    }

    // USERS
    match /users/{userId} {
      allow read: if true;

      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null &&
                       (
                         ( request.auth.uid == userId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'pseudo', 'avatarUrl']) &&
                           (!('displayName' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.displayName is string) &&
                           (!('pseudo' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.pseudo is string) &&
                           (!('avatarUrl' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.avatarUrl is string)
                         ) ||
                         isAdmin()
                       ) &&
                       (isAdmin() || (
                           request.resource.data.uid == resource.data.uid &&
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
                       ));

      allow delete: if isAdmin();
    }

    // SITE CONFIGURATION
    match /siteConfiguration/{configDocId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}