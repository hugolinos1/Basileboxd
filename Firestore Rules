Okay, il semble que les modifications précédentes n'aient pas résolu le problème d'ajout de souvenirs pour les utilisateurs non-créateurs, et cela est probablement toujours lié aux règles de sécurité Firestore.

Revoyons la règle concernant la mise à jour des `mediaItems` et simplifions-la pour nous assurer qu'elle permette l'ajout de souvenirs par n'importe quel utilisateur authentifié, tout en s'appuyant sur votre code côté client pour définir correctement l'`uploaderId`.

**Règles Firestore Actuelles (Partie pertinente) :**

```
// Règle 3: Tout utilisateur connecté peut AJOUTER des souvenirs (mediaItems)
// Cette règle est spécifique à l'ajout pour éviter des écritures trop larges par des non-créateurs.
// La modification/suppression par le créateur/admin est gérée par la Règle 1.
( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
  request.resource.data.mediaItems.size() > resource.data.mediaItems.size() && // Strictement pour l'ajout
  // Validation de base que les nouveaux items ont un uploaderId correspondant à l'utilisateur actuel
  // Ceci est une simplification. Une validation complète de chaque item ajouté est complexe en règles.
  request.resource.data.mediaItems[resource.data.mediaItems.size()].uploaderId == request.auth.uid // <- C'est la partie la plus délicate
)
```

Le problème principal avec la validation `request.resource.data.mediaItems[resource.data.mediaItems.size()].uploaderId == request.auth.uid` est que :

1.  Si `resource.data.mediaItems` est `null` (aucun souvenir avant cet ajout), `resource.data.mediaItems.size()` échouera.
2.  `arrayUnion` peut ajouter plusieurs éléments, et cette règle ne vérifierait que le "premier" nouvel élément (si l'indexation fonctionnait comme prévu, ce qui n'est pas toujours le cas avec `diff` et les états intermédiaires des tableaux).

**Solution Proposée : Simplifier la règle et se fier au code client**

Votre code côté client dans `src/app/party/[id]/page.tsx` (fonction `handleUploadSouvenirs`) définit déjà correctement l'`uploaderId` sur l'UID de l'utilisateur connecté lorsqu'il construit l'objet `MediaItem` :

```typescript
// Dans src/app/party/[id]/page.tsx, fonction handleUploadSouvenirs (extrait)
// ...
.then(url => {
    if (url && user) { // `user` ici est l'utilisateur authentifié
        return {
            // ... autres champs ...
            uploaderId: user.uid, // C'est correct !
            // ... autres champs ...
          } as MediaItem;
    }
    return null;
})
// ...
await updateDoc(partyDocRef, {
    mediaItems: arrayUnion(...successfulUploadedMediaItems)
});
// ...
```

Étant donné que votre code client s'assure déjà que les nouveaux souvenirs ont le bon `uploaderId`, nous pouvons simplifier la règle de sécurité pour l'ajout de souvenirs. La règle principale pour le créateur/admin (Règle 1) permet toujours une gestion plus large de `mediaItems`.

**Règles Firestore Modifiées :**

Voici l'ensemble de vos règles avec la modification pour la Règle 3 (ajout de souvenirs) :

```firestore
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && request.auth.uid == '4aqCNYkLwgXpp5kjMnGA6V0bdL52';
    }

    match /parties/{partyId} {
      allow read: if true;

      allow create: if request.auth != null &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.date is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.creatorEmail == request.auth.token.email &&
                       request.resource.data.participants is list &&
                       request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
                      (
                        // Règle 1: Créateur ou Admin met à jour les détails principaux ET/OU les mediaItems ET/OU les participants
                        ( (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems']) &&
                          (!('name' in request.resource.data.diff(resource.data).affectedKeys()) || (request.resource.data.name is string && request.resource.data.name.size() > 0) ) &&
                          (!('date' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.date is timestamp ) &&
                          request.resource.data.createdBy == resource.data.createdBy &&
                          request.resource.data.creatorEmail == resource.data.creatorEmail
                        ) ||
                        // Règle 2: Tout utilisateur connecté peut ajouter/mettre à jour sa propre note
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                          request.resource.data.ratings[request.auth.uid] is number &&
                          request.resource.data.ratings[request.auth.uid] >= 0 && request.resource.data.ratings[request.auth.uid] <= 10 &&
                          // Assurer que l'utilisateur ne modifie que sa propre clé de notation et n'affecte pas les autres.
                          // (Si `ratings` est null au départ, `resource.data.ratings.keys()` échouera. Une meilleure vérification est complexe ici)
                          // On se fie au fait que `hasOnly(['ratings'])` limite le champ, et le client envoie la bonne structure.
                          (resource.data.ratings == null || !(request.auth.uid in resource.data.ratings.keys()) || request.resource.data.ratings.size() >= resource.data.ratings.size())
                        ) ||
                        // Règle 3: Tout utilisateur connecté peut AJOUTER des souvenirs (mediaItems)
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
                          (
                            (resource.data.mediaItems == null && request.resource.data.mediaItems.size() > 0) || // Initialisation avec un ou plusieurs items
                            (resource.data.mediaItems != null && request.resource.data.mediaItems.size() > resource.data.mediaItems.size()) // Ajout à un tableau existant
                          )
                          // La validation que request.auth.uid == uploaderId pour les NOUVEAUX items
                          // est gérée côté client lors de la construction de l'objet MediaItem avant l'envoi de l'arrayUnion.
                          // La règle ici permet l'ajout si c'est la seule modification et que le tableau grandit.
                        )
                      );

      allow delete: if isAdmin();

      match /comments/{commentId} {
        allow read: if true;

        allow create: if request.auth != null &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 &&
                         request.resource.data.partyId == partyId &&
                         request.resource.data.timestamp is timestamp;

        allow update: if request.auth != null &&
                         (
                           (request.auth.uid == resource.data.userId &&
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']) &&
                            request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                            request.resource.data.userId == resource.data.userId &&
                            request.resource.data.partyId == resource.data.partyId &&
                            request.resource.data.timestamp == resource.data.timestamp
                           ) ||
                           isAdmin()
                         );

        allow delete: if request.auth != null &&
                         (request.auth.uid == resource.data.userId || isAdmin());
      }
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null &&
                       (
                         ( request.auth.uid == userId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'pseudo', 'avatarUrl']) &&
                           (!('displayName' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.displayName is string) &&
                           (!('pseudo' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.pseudo is string) &&
                           (!('avatarUrl' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.avatarUrl is string)
                         ) ||
                         isAdmin()
                       ) &&
                       (isAdmin() || (
                           request.resource.data.uid == resource.data.uid &&
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
                       ));

      allow delete: if isAdmin();
    }
  }
}
```

**Explication de la modification pour la Règle 3 (Ajout de Souvenirs) :**

*   `request.resource.data.mediaItems.size() > resource.data.mediaItems.size()` :  Ceci garantit que des éléments sont bien ajoutés au tableau.
*   `(resource.data.mediaItems == null && request.resource.data.mediaItems.size() > 0)` :  Ceci gère le cas où le tableau `mediaItems` est créé pour la première fois.
*   La validation complexe de l'`uploaderId` pour chaque nouvel élément est retirée de la règle. On fait confiance au code client qui prépare l'objet `MediaItem` avec le bon `uploaderId` avant de l'envoyer à `arrayUnion`. C'est une approche courante et souvent plus simple à maintenir pour les opérations sur les tableaux.

**Actions à effectuer :**

1.  **Appliquez ces règles mises à jour** dans votre console Firebase (Firestore -> Règles).
2.  **Publiez** les règles et attendez quelques minutes pour qu'elles se propagent.
3.  **Testez à nouveau** l'ajout d'un souvenir en tant qu'utilisateur non-créateur de l'événement.

Normalement, cela devrait résoudre le problème de permission pour l'ajout de souvenirs. Si l'erreur persiste, il faudra examiner plus en détail les logs du navigateur au moment exact de l'échec pour voir si Firestore donne plus d'indices sur la partie spécifique de la règle qui est refusée.