rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is an admin
    function isAdmin() {
      // IMPORTANT: Replace 'YOUR_ADMIN_UID_HERE' with the actual UID of the admin user from Firebase Authentication.
      // Example: return request.auth != null && request.auth.uid == 'actualAdminUid12345';
      return request.auth != null && request.auth.uid == '4aqCNYkLwgXpp5kjMnGA6V0bdL52';
    }

    // Rule for the "parties" (Events) collection
    match /parties/{partyId} {
      allow read: if true; // Anyone can read event details

      allow create: if request.auth != null &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.date is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.creatorEmail == request.auth.token.email &&
                       request.resource.data.participants is list &&
                       request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
                      (
                        // Rule 1: Creator or Admin can update main event details, media, and participants
                        ( (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems']) &&
                          (!('name' in request.resource.data.diff(resource.data).affectedKeys()) || (request.resource.data.name is string && request.resource.data.name.size() > 0) ) &&
                          (!('date' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.date is timestamp ) &&
                          request.resource.data.createdBy == resource.data.createdBy &&
                          request.resource.data.creatorEmail == resource.data.creatorEmail
                        ) ||
                        // Rule 2: Any authenticated user can add/update their own rating
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                          request.resource.data.ratings[request.auth.uid] is number &&
                          request.resource.data.ratings[request.auth.uid] >= 0 && request.resource.data.ratings[request.auth.uid] <= 10 &&
                          // Ensure only the user's own rating is modified and no other ratings are removed
                          (resource.data.ratings == null || resource.data.ratings.keys().removeAll(request.resource.data.ratings.keys()).size() == 0) &&
                          request.resource.data.ratings.keys().removeAll(resource.data.ratings == null ? [] : resource.data.ratings.keys()).hasOnly([request.auth.uid])
                        ) ||
                        // Rule 3: Any authenticated user can ADD new mediaItems (souvenirs)
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
                          (resource.data.mediaItems == null || request.resource.data.mediaItems.size() >= resource.data.mediaItems.size()) && // Allows adding or if admin/creator, potentially reordering/removing via Rule 1
                          // Basic validation: if adding, new items should have uploaderId set to current user.
                          // This is a simplification. Full validation of arrayUnion items is complex.
                          // For adding a single item:
                          (request.resource.data.mediaItems.size() > 0 && resource.data.mediaItems == null || request.resource.data.mediaItems.size() > resource.data.mediaItems.size() ?
                             request.resource.data.mediaItems[request.resource.data.mediaItems.size() - 1].uploaderId == request.auth.uid : true)
                        )
                      );

      allow delete: if isAdmin();

      // Nested rule for comments subcollection - this is fine for direct path access
      match /comments/{commentId} {
        // allow read is handled by the collectionGroup rule below for queries,
        // but this specific path read can also be defined here if needed for direct access.
        allow read: if true; // Or request.auth != null;

        allow create: if request.auth != null &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 &&
                         request.resource.data.partyId == partyId &&
                         request.resource.data.timestamp is timestamp;

        allow update: if request.auth != null &&
                         (
                           (request.auth.uid == resource.data.userId &&
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']) &&
                            request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                            request.resource.data.userId == resource.data.userId &&
                            request.resource.data.partyId == resource.data.partyId &&
                            request.resource.data.timestamp == resource.data.timestamp
                           ) ||
                           isAdmin()
                         );

        allow delete: if request.auth != null &&
                         (request.auth.uid == resource.data.userId || isAdmin());
      }
    }

    // Rule for the "users" collection
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null &&
                       (
                         ( request.auth.uid == userId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'pseudo', 'avatarUrl']) &&
                           (!('displayName' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.displayName is string) &&
                           (!('pseudo' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.pseudo is string) &&
                           (!('avatarUrl' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.avatarUrl is string)
                         ) ||
                         isAdmin()
                       ) &&
                       (isAdmin() || (
                           request.resource.data.uid == resource.data.uid &&
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
                       ));

      allow delete: if isAdmin();
    }

    // Explicit rule for the 'comments' collection group
    // This rule is crucial for collectionGroup queries on 'comments'.
    match /{path=**}/comments/{commentId} {
      // Allow authenticated users to read any comment for the profile page query
      allow read: if request.auth != null;
      // If comments need to be created/updated/deleted via collectionGroup (less common), add rules here.
      // For now, assuming create/update/delete are handled via direct path to /parties/{partyId}/comments/{commentId}
    }
  }
}
