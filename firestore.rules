
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Règles pour la collection 'users'
    match /users/{userId} {
      // Les utilisateurs peuvent lire leur propre profil
      allow read: if request.auth != null && request.auth.uid == userId;
      // Les utilisateurs peuvent créer leur propre profil (lors de l'inscription)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Les utilisateurs peuvent mettre à jour leur propre profil (displayName, avatarUrl)
      allow update: if request.auth != null && request.auth.uid == userId
                     && request.resource.data.keys().hasOnly(['displayName', 'avatarUrl']); // Autorise seulement la maj de ces champs
      // Personne ne peut supprimer de profils utilisateurs depuis le client
      allow delete: if false;
    }

     // Permettre à tout utilisateur authentifié de lister les utilisateurs (pour la page /users)
     // ATTENTION : Cela expose les emails de tous les utilisateurs. Si ce n'est pas souhaité, restreindre cette règle.
    match /users/{userId} {
        allow list: if request.auth != null;
    }


    // Règles pour la collection 'parties'
    match /parties/{partyId} {
      // Tout utilisateur authentifié peut lire les détails d'un événement
      allow read: if request.auth != null;

      // Tout utilisateur authentifié peut créer un nouvel événement
      // Validation : Assure que 'createdBy' correspond à l'UID de l'utilisateur et que les champs essentiels existent
      allow create: if request.auth != null
                     && request.resource.data.createdBy == request.auth.uid
                     && request.resource.data.name is string
                     && request.resource.data.date is timestamp
                     && request.resource.data.participantEmails is list // Assure que le champ existe
                     && request.resource.data.participants is list; // Assure que le champ existe

      // Règles de mise à jour :
      // 1. Le créateur peut modifier les informations principales (nom, date, lieu, description).
      // 2. TOUT utilisateur authentifié peut mettre à jour les champs 'ratings', 'comments', 'mediaUrls', 'participants', 'participantEmails'.
      allow update: if request.auth != null && (
                    // Règle pour le créateur (modification des infos principales)
                    (request.auth.uid == resource.data.createdBy &&
                     request.resource.data.name is string &&
                     request.resource.data.date is timestamp
                     // Ajoute d'autres validations si nécessaire pour les champs modifiables par le créateur
                    )
                    ||
                    // Règle pour TOUS les utilisateurs authentifiés (ajout/modification notes, commentaires, médias, participants)
                    // On vérifie que SEULS ces champs sont modifiés ou ajoutés
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings', 'comments', 'mediaUrls', 'participants', 'participantEmails', 'coverPhotoUrl'])
                  );


      // Personne ne peut supprimer un événement depuis le client (sauf via Cloud Function admin)
      allow delete: if false;

        // Règles pour la sous-collection 'comments'
        match /comments/{commentId} {
            // Tout utilisateur authentifié peut lire les commentaires
            allow read: if request.auth != null;
            // Tout utilisateur authentifié peut créer un commentaire
            // Validation : Assure que 'userId' correspond à l'UID de l'utilisateur
            allow create: if request.auth != null
                         && request.resource.data.userId == request.auth.uid
                         && request.resource.data.text is string
                         && request.resource.data.timestamp == request.time; // Utilise le timestamp serveur
            // Personne ne peut modifier ou supprimer un commentaire depuis le client
            allow update, delete: if false;
        }
    }
  }
}
