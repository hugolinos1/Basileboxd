rules_version = '2';

service cloud.firestore {
  // Fonction utilitaire pour vérifier si l'utilisateur est un administrateur
  function isAdmin() {
    // ASSUREZ-VOUS DE REMPLACER PAR L'UID RÉEL DE L'ADMINISTRATEUR
    return request.auth != null && request.auth.uid == '4aqCNYkLwgXpp5kjMnGA6V0bdL52';
  }

  match /databases/{database}/documents {

    match /parties/{partyId} {
      allow read: if true;

      allow create: if request.auth != null &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.date is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.creatorEmail == request.auth.token.email &&
                       request.resource.data.participants is list &&
                       request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
                      (
                        // Règle 1: Créateur ou Admin met à jour les champs principaux, médias, participants
                        ( (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                          // Vérifie que les champs modifiés sont autorisés pour cette règle
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasAny(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems']) &&
                          // Validations pour les champs s'ils sont effectivement modifiés
                          (request.resource.data.diff(resource.data).affectedKeys().has('name') == false || (request.resource.data.name is string && request.resource.data.name.size() > 0)) &&
                          (request.resource.data.diff(resource.data).affectedKeys().has('date') == false || request.resource.data.date is timestamp) &&
                          // Empêcher la modification des champs sensibles par le créateur via cette règle (l'admin peut toujours)

 (isAdmin() || (request.resource.data.createdBy == resource.data.createdBy && request.resource.data.creatorEmail == resource.data.creatorEmail)))
 || // Opérateur OR pour combiner les règles
                        ( // Règle 2: Tout utilisateur connecté peut ajouter/mettre à jour SA PROPRE note dans le champ 'ratings'
 request.auth != null && // S'assurer que l'utilisateur est authentifié
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                          request.resource.data.ratings is map && // S'assurer que 'ratings' est une map
                          request.auth.uid in request.resource.data.ratings.keys() && // La clé de la note est l'UID de l'utilisateur
                          request.resource.data.ratings[request.auth.uid] is number &&
                          request.resource.data.ratings[request.auth.uid] >= 0 && request.resource.data.ratings[request.auth.uid] <= 10 &&
                          // Vérifier que les autres notes n'ont pas été modifiées ou supprimées
                          (resource.data.ratings == null || request.resource.data.ratings.keys().removeAll([request.auth.uid]).size() == resource.data.ratings.keys().removeAll([request.auth.uid]).size())
 ) ||
 ( // Règle 3: Tout utilisateur connecté peut AJOUTER des souvenirs (mediaItems)
 request.auth != null && // L'utilisateur doit être authentifié
 request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
                          request.resource.data.mediaItems is list && (resource.data.mediaItems == null || request.resource.data.mediaItems.size() > resource.data.mediaItems.size()))
                      );
      allow delete: if isAdmin();

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                       request.resource.data.partyId == partyId &&
                       request.resource.data.timestamp is timestamp;
        allow update: if request.auth != null &&
                         (
                           (request.auth.uid == resource.data.userId &&
                             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']) &&
                             request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                             request.resource.data.userId == resource.data.userId &&
                             request.resource.data.partyId == resource.data.partyId &&
                             request.resource.data.timestamp == resource.data.timestamp
                           ) ||
 isAdmin()
                         );
        allow delete: if request.auth != null &&
                         (request.auth.uid == resource.data.userId || isAdmin());
      }
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null &&
                       (
                         // Scenario 1: L'utilisateur met à jour son propre profil
                         ( request.auth.uid == userId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'pseudo', 'avatarUrl']) &&
                           // Valider les types si les champs sont présents dans la requête de mise à jour
                           (request.resource.data.diff(resource.data).affectedKeys().has('displayName') == false || request.resource.data.displayName is string) &&
                           (request.resource.data.diff(resource.data).affectedKeys().has('pseudo') == false || request.resource.data.pseudo is string) &&
                           (request.resource.data.diff(resource.data).affectedKeys().has('avatarUrl') == false || request.resource.data.avatarUrl is string) &&
                           // Les champs critiques ne doivent pas être modifiés par l'utilisateur lui-même
                           request.resource.data.uid == resource.data.uid &&
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
 ) ||
                         // Scenario 2: L'admin met à jour le profil
                         isAdmin() // L'admin peut mettre à jour plus largement (les champs critiques aussi si besoin)
                       );
      allow delete: if isAdmin();
    }
  }
}
    