rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is an admin
    function isAdmin() {
      // MAKE SURE TO REPLACE '4aqCNYkLwgXpp5kjMnGA6V0bdL52' WITH THE ACTUAL ADMIN UID if it changed
      return request.auth != null && request.auth.uid == '4aqCNYkLwgXpp5kjMnGA6V0bdL52';
    }

    // Rule for querying the 'comments' collection group
    // This is crucial for fetching all comments by a user on their profile page.
    match /{path=**}/comments/{commentId} {
      allow read: if request.auth != null; // Allow authenticated users to read any comment via collectionGroup
      // Create, update, delete rules for individual comments are defined below within the party context.
      // This rule specifically addresses the collectionGroup query permission for reading.
      // For admin to delete any comment via collectionGroup (e.g., from an admin panel), you'd add:
      // allow delete: if isAdmin();
      // However, the current admin panel logic deletes comments under a specific party,
      // so the delete rule within `match /parties/{partyId}/comments/{commentId}` is sufficient for that.
    }

    match /parties/{partyId} {
      allow read: if true; // Anyone can read party details

      allow create: if request.auth != null &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.date is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.creatorEmail == request.auth.token.email &&
                       request.resource.data.participants is list &&
                       request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
                      (
                        // Rule 1: Creator or Admin updates main event details, media, or participants
                        ( (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems']) &&
                          (!('name' in request.resource.data.diff(resource.data).affectedKeys()) || (request.resource.data.name is string && request.resource.data.name.size() > 0) ) &&
                          (!('date' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.date is timestamp ) &&
                          request.resource.data.createdBy == resource.data.createdBy && // Prevent changing creator
                          request.resource.data.creatorEmail == resource.data.creatorEmail // Prevent changing creatorEmail
                        ) ||
                        // Rule 2: Any authenticated user can add/update their own rating
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                          request.resource.data.ratings[request.auth.uid] is number &&
                          request.resource.data.ratings[request.auth.uid] >= 0 && request.resource.data.ratings[request.auth.uid] <= 10 &&
                          // Ensure user only modifies their own rating entry or adds it
                          (resource.data.ratings == null || resource.data.ratings.keys().removeAll(request.resource.data.ratings.keys()).size() == 0) &&
                          request.resource.data.ratings.keys().removeAll(resource.data.ratings.keys().hasAny([request.auth.uid]) ? resource.data.ratings.keys() : []).hasOnly([request.auth.uid])
                        ) ||
                        // Rule 3: Any authenticated user can ADD media items (souvenirs)
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
                          request.resource.data.mediaItems.size() >= (resource.data.mediaItems == null ? 0 : resource.data.mediaItems.size()) && // Allows adding to an empty or existing array
                          // Basic check that new items (if any) have the uploaderId set to the current user
                          // This is a simplified check. Full validation of each new item's structure is complex in rules.
                          (request.resource.data.mediaItems.size() == 0 || // No items being added, or...
                           (resource.data.mediaItems == null || request.resource.data.mediaItems.size() > resource.data.mediaItems.size()) && // Items are being added
                           (request.resource.data.mediaItems.size() == 0 || request.resource.data.mediaItems[request.resource.data.mediaItems.size() - 1].uploaderId == request.auth.uid)
                          )
                        )
                      );

      allow delete: if isAdmin();

      // Sub-collection "comments" within a specific party
      match /comments/{commentId} {
        // Read is covered by the collectionGroup rule if it's permissive enough
        // allow read: if true; // Redundant if collectionGroup read is 'if true'

        allow create: if request.auth != null &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 &&
                         request.resource.data.partyId == partyId && // Ensure comment is for this party
                         request.resource.data.timestamp is timestamp; // serverTimestamp will be validated

        allow update: if request.auth != null &&
                         (
                           (request.auth.uid == resource.data.userId && // User can update their own comment
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']) && // Only text can be updated by user
                            request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                            // Ensure critical fields are not changed by user
                            request.resource.data.userId == resource.data.userId &&
                            request.resource.data.partyId == resource.data.partyId &&
                            request.resource.data.timestamp == resource.data.timestamp
                           ) ||
                           isAdmin() // Admin can update any field of a comment
                         );

        allow delete: if request.auth != null &&
                         (request.auth.uid == resource.data.userId || isAdmin()); // User can delete their own, admin can delete any
      }
    }

    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles

      allow create: if request.auth != null &&
                       request.auth.uid == userId && // Document ID must match authenticated user's UID
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null &&
                       (
                         ( request.auth.uid == userId && // User can update their own profile
                           // Allow updating only these specific fields by the user
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'pseudo', 'avatarUrl']) &&
                           // Basic type checks if these fields are part of the update
                           (!('displayName' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.displayName is string) &&
                           (!('pseudo' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.pseudo is string) &&
                           (!('avatarUrl' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.avatarUrl is string)
                         ) ||
                         isAdmin() // Admin can update any field (client-side should still control what admin can edit)
                       ) &&
                       // Prevent non-admins from changing critical immutable fields during their own update
                       (isAdmin() || (
                           request.resource.data.uid == resource.data.uid &&
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
                       ));

      allow delete: if isAdmin(); // Only admin can delete user documents
    }
  }
}