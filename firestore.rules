rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && request.auth.uid == '4aqCNYkLwgXpp5kjMnGA6V0bdL52'; // ASSUREZ-VOUS QUE CET UID EST CORRECT
    }

    match /{path=**}/comments/{commentId} {
      allow read: if request.auth != null;
    }

    match /siteConfiguration/{configId} {
      allow read: if true;
      allow write: if isAdmin() && configId == 'heroSettings'; // CorrigÃ©: mainPageBackground -> heroSettings
      allow delete: if false;
    }

    match /parties/{partyId} {
      allow read: if true; 

      allow create: if request.auth != null &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.date is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.creatorEmail == request.auth.token.email &&
                       request.resource.data.participants is list &&
                       request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
                      ( 
                        ( (request.auth.uid == resource.data.createdBy || isAdmin()) &&
                          request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'latitude', 'longitude', 'participants', 'participantEmails', 'mediaItems']) &&
                          (!('name' in request.resource.data.diff(resource.data).affectedKeys()) || (request.resource.data.name is string && request.resource.data.name.size() > 0) ) &&
                          (!('date' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.date is timestamp ) &&
                          request.resource.data.createdBy == resource.data.createdBy && 
                          request.resource.data.creatorEmail == resource.data.creatorEmail
                        ) ||
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                          request.resource.data.ratings[request.auth.uid] is number &&
                          request.resource.data.ratings[request.auth.uid] >= 0 && request.resource.data.ratings[request.auth.uid] <= 10 &&
                          (resource.data.ratings == null || resource.data.ratings.keys().removeAll(request.resource.data.ratings.keys()).size() == 0) &&
                          request.resource.data.ratings.keys().removeAll(resource.data.ratings.keys().hasAny([request.auth.uid]) ? resource.data.ratings.keys() : []).hasOnly([request.auth.uid])
                        ) ||
                        ( request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaItems']) &&
                          request.resource.data.mediaItems.size() >= (resource.data.mediaItems == null ? 0 : resource.data.mediaItems.size()) &&
                          (request.resource.data.mediaItems.size() == 0 || 
                           (resource.data.mediaItems == null || request.resource.data.mediaItems.size() > resource.data.mediaItems.size()) &&
                           (request.resource.data.mediaItems.size() == 0 || request.resource.data.mediaItems[request.resource.data.mediaItems.size() - 1].uploaderId == request.auth.uid)
                          )
                        )
                      );

      allow delete: if isAdmin();

      match /comments/{commentId} {
        allow create: if request.auth != null &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1024 &&
                         request.resource.data.partyId == partyId &&
                         request.resource.data.timestamp is timestamp && 
                         (!('parentId' in request.resource.data) ||
                           (request.resource.data.parentId is string &&
                            request.resource.data.parentId.size() > 0 &&
                            exists(/databases/$(database)/documents/parties/$(partyId)/comments/$(request.resource.data.parentId))
                           )
                         ) &&
                         (request.resource.data.keys().hasAll(['userId', 'email', 'avatar', 'text', 'timestamp', 'partyId']) || 
                         request.resource.data.keys().hasAll(['userId', 'email', 'avatar', 'text', 'timestamp', 'partyId', 'parentId']) ||
                         request.resource.data.keys().hasAll(['userId', 'email', 'text', 'timestamp', 'partyId']) || 
                         request.resource.data.keys().hasAll(['userId', 'email', 'text', 'timestamp', 'partyId', 'parentId']));

        allow update: if request.auth != null &&
                         (
                           (request.auth.uid == resource.data.userId && 
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']) && 
                            request.resource.data.text is string && request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1024 &&
                            request.resource.data.userId == resource.data.userId &&
                            request.resource.data.partyId == resource.data.partyId &&
                            request.resource.data.timestamp == resource.data.timestamp &&
                            ((!('parentId' in request.resource.data) && !('parentId' in resource.data)) || (request.resource.data.parentId == resource.data.parentId))
                           ) ||
                           isAdmin() 
                         );

        allow delete: if request.auth != null &&
                         (request.auth.uid == resource.data.userId || isAdmin());
      }
    }

    match /users/{userId} {
      allow read: if true; 

      allow create: if request.auth != null &&
                       request.auth.uid == userId && 
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null &&
                       (
                         ( request.auth.uid == userId && 
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'pseudo', 'avatarUrl']) &&
                           (!('displayName' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.displayName is string) &&
                           (!('pseudo' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.pseudo is string) &&
                           (!('avatarUrl' in request.resource.data.diff(resource.data).affectedKeys()) || request.resource.data.avatarUrl is string)
                         ) ||
                         isAdmin() 
                       ) &&
                       (isAdmin() || (
                           request.resource.data.uid == resource.data.uid &&
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
                       ));

      allow delete: if isAdmin();
    }
  }
}
