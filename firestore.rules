
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow authenticated users to read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'parties' collection
    match /parties/{partyId} {
      // Allow any authenticated user to read any party
      allow read: if request.auth != null;

      // Allow any authenticated user to create a party, ensuring required fields
      allow create: if request.auth != null
                    && request.resource.data.name is string
                    && request.resource.data.name.size() > 0 // Ensure name is not empty
                    && request.resource.data.date is timestamp
                    && request.resource.data.createdBy == request.auth.uid // Creator must be the authenticated user
                    && request.resource.data.creatorEmail == request.auth.token.email // Creator email must match
                    && request.resource.data.participants is list // Ensure participants is a list
                    && request.resource.data.participantEmails is list // Ensure emails is a list
                    && request.auth.uid in request.resource.data.participants // Creator must be in participants
                    && request.auth.token.email in request.resource.data.participantEmails; // Creator email must be in emails

      // Allow updates under specific conditions:
      allow update: if request.auth != null && (
                    // Condition 1: Creator can update specific fields (e.g., name, description, date, location, coverPhotoUrl, add participants/media)
                    (request.auth.uid == resource.data.createdBy
                      && request.resource.data.name is string && request.resource.data.name.size() > 0
                      && request.resource.data.date is timestamp
                      // Only allow updating specific fields by creator, prevent changing creator info
                      && request.resource.data.createdBy == resource.data.createdBy
                      && request.resource.data.creatorEmail == resource.data.creatorEmail
                      // Allow changes to participants and mediaUrls by creator
                      && request.resource.data.keys().hasAll(['name', 'description', 'date', 'location', 'createdBy', 'creatorEmail', 'participants', 'participantEmails', 'mediaUrls', 'coverPhotoUrl', 'ratings', 'comments', 'createdAt'])
                    )
                    ||
                    // Condition 2: Any authenticated user can add/update their own rating
                    (request.resource.data.ratings.keys().hasOnly(resource.data.ratings.keys().concat([request.auth.uid])) // Only adding/updating own rating key
                       && request.resource.data.ratings[request.auth.uid] is number // Rating must be a number
                       && request.resource.data.ratings[request.auth.uid] >= 0.5 && request.resource.data.ratings[request.auth.uid] <= 5 // Rating within range
                       // Ensure other fields remain unchanged when rating
                       && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings'])
                    )
                    ||
                    // Condition 3: Any authenticated user can add a comment (using arrayUnion simulation)
                    (request.resource.data.comments.size() == resource.data.comments.size() + 1 // Only adding one comment
                      && request.resource.data.comments[-1].userId == request.auth.uid // The new comment's userId matches auth uid
                      && request.resource.data.comments[-1].email == request.auth.token.email // Email matches
                      && request.resource.data.comments[-1].text is string // Text is string
                      && request.resource.data.comments[-1].text.size() > 0 // Text is not empty
                      && request.resource.data.comments[-1].timestamp == request.time // Timestamp is server time
                      // Ensure other fields remain unchanged when commenting
                       && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments'])
                    )
                    ||
                    // Condition 4: Creator or Admin can add participants (if participants list is being modified)
                    ( (request.auth.uid == resource.data.createdBy /* || isAdmin check needs backend */ )
                      && request.resource.data.participants is list
                      && request.resource.data.participantEmails is list
                      // Ensure only participants/participantEmails are being changed, or other allowed creator fields
                       && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'participantEmails', 'name', 'description', 'date', 'location', 'coverPhotoUrl', 'mediaUrls'])
                    )
                    ||
                     // Condition 5: Any authenticated user can add media (if mediaUrls list is being modified)
                    (request.resource.data.mediaUrls is list
                      // Ensure only mediaUrls are being changed, or other allowed creator fields
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaUrls', 'name', 'description', 'date', 'location', 'coverPhotoUrl', 'participants', 'participantEmails'])
                    )
                  );


      // Disallow client-side deletion for now
      allow delete: if false;

    }
  }
}
      
    