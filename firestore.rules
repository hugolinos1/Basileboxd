rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and list user profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow users to create their own profile document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow users to update their own profile, but not critical fields like uid or createdAt
      allow update: if request.auth != null && request.auth.uid == userId
                    && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'createdAt']));
    }

    // Rules for the 'parties' collection
    match /parties/{partyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
                   && request.resource.data.name is string
                   && request.resource.data.name.size() > 1 // At least 2 characters
                   && request.resource.data.date is timestamp
                   && request.resource.data.createdBy == request.auth.uid
                   // Ensure necessary arrays exist
                   && request.resource.data.participants is list
                   && request.resource.data.participantEmails is list
                   && request.resource.data.mediaUrls is list
                   && request.resource.data.ratings is map
                   && request.resource.data.comments is list;


      // Allow updates:
      // 1. Creator can update most fields (except protected ones like createdBy, createdAt).
      // 2. Any authenticated user can update their own rating (ratings map).
      // 3. Any authenticated user can add comments (comments array).
      // 4. Any authenticated user can add mediaUrls (mediaUrls array) - added this permission
      // 5. Creator or Admin can add participants/participantEmails (participants/participantEmails arrays)
      allow update: if request.auth != null && (
                     // Creator can update specific fields
                     (request.auth.uid == resource.data.createdBy &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'description', 'date', 'location', 'coverPhotoUrl', 'mediaUrls', 'participants', 'participantEmails', 'ratings', 'comments'])) // Added 'mediaUrls', 'participants', 'participantEmails', 'ratings', 'comments'
                     ||
                     // Any authenticated user can add/update their rating
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']) &&
                      request.resource.data.ratings.diff(resource.data.ratings).affectedKeys().hasOnly([request.auth.uid])) // Check only the user's own rating key is changed
                     ||
                     // Any authenticated user can add a comment (check if only 'comments' array is changing)
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments']))
                     ||
                      // Any authenticated user can add mediaUrls
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['mediaUrls']))
                      ||
                      // Creator OR admin (requires admin claim check in backend/functions, rule simulates creator only for now)
                     // can add participants/emails
                      (request.auth.uid == resource.data.createdBy && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'participantEmails']))
                  );


      allow delete: if false; // No client-side deletes allowed for now. Implement with Cloud Function for admins if needed.

      // Rules for the 'comments' subcollection (if you were using one, otherwise ignore)
      // match /comments/{commentId} {
      //  allow read: if request.auth != null;
      //  allow create: if request.auth != null;
      //  allow update, delete: if false; // Or check if request.auth.uid == resource.data.userId
      // }
    }
  }
}
